// PocketFlow Hello World Example - Motoko Version
// Mirrors the Python cookbook/pocketflow-hello-world example
import Debug "mo:base/Debug";
import Text "mo:base/Text";

// For now, simulate the workflow without complex imports
actor HelloWorldExample {
    // Simulate calling LLM mock service
    private func call_llm(prompt: Text) : async Text {
        // In a real implementation, this would call the LLM mock canister
        // For now, return a mock response that matches the Python behavior
        let lowerPrompt = Text.toLowercase(prompt);
        let response = if (Text.contains(lowerPrompt, #text "meaning of life")) {
            "42 is the answer to the ultimate question of life, the universe, and everything."
        } else if (Text.contains(lowerPrompt, #text "end of universe")) {
            "The universe will eventually reach maximum entropy in a state called heat death."
        } else {
            "That's an interesting question! As a mock LLM service, I can provide thoughtful responses to help demonstrate PocketFlow workflows on the Internet Computer."
        };
        
        response # " (Generated by IC Mock LLM)"
    };
    
    // AnswerNode class - mirrors Python's AnswerNode
    private class AnswerNode() {
        // prep: Read question from shared state (Python: def prep(self, shared))
        public func prep(question: Text) : Text {
            question
        };
        
        // exec: Call LLM to get answer (Python: def exec(self, question))
        public func exec(question: Text) : async Text {
            await call_llm(question)
        };
        
        // post: Store answer in shared state (Python: def post(self, shared, prep_res, exec_res))
        public func post(answer: Text) : Text {
            answer
        };
        
        // Main run method that orchestrates prep -> exec -> post
        public func run(question: Text) : async Text {
            let prepResult = prep(question);
            let execResult = await exec(prepResult);
            let postResult = post(execResult);
            postResult
        };
    };
    
    // qa_flow equivalent - mirrors Python's Flow(start=answer_node)
    private let answerNode = AnswerNode();
    
    // Main workflow function - mirrors Python's qa_flow.run(shared)
    public func run_workflow(question: Text) : async Text {
        // Simulate the Python shared dictionary:
        // shared = {
        //     "question": "In one sentence, what's the end of universe?",
        //     "answer": None
        // }
        let answer = await answerNode.run(question);
        answer
    };
    
    // Test function that mirrors Python's main()
    public func test() : async Text {
        let question = "In one sentence, what's the end of universe?";
        let answer = await run_workflow(question);
        
        // Return in a format that shows both question and answer like Python
        "Question: " # question # " | Answer: " # answer
    };
    
    // Additional test methods for different questions
    public func test_meaning_of_life() : async Text {
        await run_workflow("What is the meaning of life?")
    };
    
    public func test_custom(question: Text) : async Text {
        await run_workflow(question)
    };
    
    // Health check
    public func health() : async Text {
        "PocketFlow Hello World is running on the Internet Computer!"
    };
}